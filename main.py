from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext
import json
import os

DATA_FILE = "data.json"


def load_data():
    if not os.path.exists(DATA_FILE):
        return {"users_balance": {}, "purchase_history": {}}

    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except json.JSONDecodeError:
        print("‚ö† –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return {"users_balance": {}, "purchase_history": {}}


# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def save_data():
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump({"users_balance": users_balance, "purchase_history": purchase_history}, f, indent=4)
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
data = load_data()
users_balance = data["users_balance"]
users_data = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
purchase_history = data["purchase_history"]



print(f"üìÇ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω? {os.path.exists(DATA_FILE)}")
print(f"üìë –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π: {open(DATA_FILE, 'r', encoding='utf-8').read() if os.path.exists(DATA_FILE) else '–§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")


print("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", data)  # –û—Ç–ª–∞–¥–∫–∞

# –°–ª–æ–≤–∞—Ä—å —Ñ—Ä—É–∫—Ç–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∏ —Ü–µ–Ω–∞–º–∏
fruits = {
    "Gas": {"active": True, "price": 150, "description": "–§–∏–∑–∏—á–µ—Å–∫–∏–π –§—Ä—É–∫—Ç –ì–∞–∑–∞."},
    "Dough": {"active": True, "price": 55, "description": "–§–∏–∑–∏—á–µ—Å–∫–∏–π –§—Ä—É–∫—Ç –¢–µ—Å—Ç–∞."},
    "Leopard": {"active": True, "price": 70, "description": "–§–∏–∑–∏—á–µ—Å–∫–∏–π –§—Ä—É–∫—Ç –õ–µ–æ–ø–∞—Ä–¥–∞."},
    "T-Rex": {"active": True, "price": 30, "description": "–§–∏–∑–∏—á–µ—Å–∫–∏–π –§—Ä—É–∫—Ç –¢–∏-–†–µ–∫—Å–∞."},
    "Spirit": {"active": True, "price": 8, "description": "–§–∏–∑–∏—á–µ—Å–∫–∏–π –§—Ä—É–∫—Ç –°–ø–∏—Ä–∏—Ç–∞."},
    "Mammoth": {"active": True, "price": 10, "description": "–§–∏–∑–∏—á–µ—Å–∫–∏–π –§—Ä—É–∫—Ç –ú–∞–º–æ–Ω—Ç–∞."}
}


purchase_history = {}

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
ADMIN_ID = 5363826493
ADMIN_USERNAME = "@PlaySetYT"


async def start(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    username = update.message.from_user.username

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if username:
        users_data[username] = user_id

    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ PlayFun!\n"
        "–≠—Ç–æ —Ç–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –Ω–∞ Python.\n"
        "–í—Å–µ –∫–æ–º–∞–Ω–¥—ã - /help\n"
        "–î–ê–ù–ù–´–ï –ü–†–ò –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ï –ë–û–¢–ê –ò–õ–ò –û–ë–ù–û–í–õ–ï–ù–ò–ò –ù–ï –°–û–•–†–ê–ù–Ø–Æ–¢–°–Ø "
        "(–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å 00:00 –¥–æ 14:25 –ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º) –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π - @playrolls_playfun (TikTok) \n"
    )



# /help
async def help_command(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/help - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–∞—Ö\n"
        "/shop - –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—Ä—É–∫—Ç–æ–≤\n"
        "/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"

    )
    if update.message.from_user.id == ADMIN_ID:
        help_text += (
            "/add_balance <—Å—É–º–º–∞> @username - –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)\n"
            "/active <fruit_name> - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä—É–∫—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)\n"
            "/unactive <fruit_name> - –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä—É–∫—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)\n"
            "/history @username - –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)\n"
            "/m @username - –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"
            "/mID @username - –ü–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"
        )
    await update.message.reply_text(help_text)


# /balance
async def balance(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    balance = users_balance.get(user_id, 0)
    await update.message.reply_text(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –†—É–±–ª–µ–π.")
    save_data()


# /add_balance
async def add_balance(update: Update, context: CallbackContext) -> None:
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞.")
        return

    args = context.args
    if len(args) < 2:
        await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_balance <—Å—É–º–º–∞> @username")
        return

    try:
        amount = int(args[0])
        username = args[1].replace('@', '')
        user = await context.bot.get_chat(username)
        user_id = user.id

        if user_id not in users_balance:
           users_balance[user_id] = 0
        users_balance[user_id] = users_balance.get(user_id, 0) + amount  # –î–æ–±–∞–≤–ª—è–µ—Ç —Å—É–º–º—É
        save_data()
        await update.message.reply_text(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} –†—É–±–ª–µ–π.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

async def get_user_id(update: Update, context: CallbackContext) -> None:
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /mID @username")
        return

    username = context.args[0].replace('@', '')

    if username in users_data:
        user_id = users_data[username]
        await update.message.reply_text(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}: `{user_id}`")
    else:
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –µ—â–µ –Ω–µ –ø–∏—Å–∞–ª –±–æ—Ç—É.")


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ñ—Ä—É–∫—Ç–æ–≤
async def active(update: Update, context: CallbackContext) -> None:
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ñ—Ä—É–∫—Ç–æ–≤.")
        return
    
    args = context.args
    if not args:
        return await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ñ—Ä—É–∫—Ç –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
    
    fruit_name = args[0]
    
    if fruit_name not in fruits:
        return await update.message.reply_text(f"–§—Ä—É–∫—Ç —Å –∏–º–µ–Ω–µ–º {fruit_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    fruits[fruit_name]["active"] = True
    await update.message.reply_text(f"–§—Ä—É–∫—Ç {fruit_name} —Ç–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–µ–Ω.")


async def unactive(update: Update, context: CallbackContext) -> None:
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ñ—Ä—É–∫—Ç–æ–≤.")
        return
    
    args = context.args
    if not args:
        return await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ñ—Ä—É–∫—Ç –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
    
    fruit_name = args[0]
    
    if fruit_name not in fruits:
        return await update.message.reply_text(f"–§—Ä—É–∫—Ç —Å –∏–º–µ–Ω–µ–º {fruit_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    fruits[fruit_name]["active"] = False
    await update.message.reply_text(f"–§—Ä—É–∫—Ç {fruit_name} —Ç–µ–ø–µ—Ä—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ—Ä—É–∫—Ç–∞
async def fruits_list(update: Update, context: CallbackContext) -> None:
    keyboard = []
    available_fruits = [fruit for fruit, data in fruits.items() if data["active"]]
    
    if not available_fruits:
        return await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—Ä—É–∫—Ç–æ–≤.")
    
    for fruit in available_fruits:
        keyboard.append([InlineKeyboardButton(fruit, callback_data=f"fruit_{fruit}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("PlayFun/Shop\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä—É–∫—Ç:", reply_markup=reply_markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ—Ä—É–∫—Ç–∞ –∏ –æ–ø–ª–∞—Ç—ã
async def fruit_button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    fruit_name = query.data.split("_")[1]

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ—Ä—É–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if fruit_name not in fruits:
        return await query.answer(f"–§—Ä—É–∫—Ç {fruit_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    fruit = fruits[fruit_name]
    text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ—Ä—É–∫—Ç: {fruit_name}\n{fruit['description']}\n–¶–µ–Ω–∞: {fruit['price']} –†—É–±–ª–µ–π."
    
    keyboard = [[InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"pay_{fruit_name}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup)


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
async def confirm_payment(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    action_data = query.data.split("_")
    
    if len(action_data) != 2 or action_data[0] != "pay":
        return await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ!")

    fruit_name = action_data[1]
    fruit = fruits.get(fruit_name)

    if not fruit or not fruit["active"]:
        return await query.edit_message_text(f"–≠—Ç–æ—Ç —Ñ—Ä—É–∫—Ç {fruit_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

    user_id = query.from_user.id
    balance = users_balance.get(user_id, 0)

    if balance >= fruit["price"]:
        users_balance[user_id] = users_balance.get(user_id, 0) - fruit["price"]
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–∫–∏
        if user_id not in purchase_history:
            purchase_history[user_id] = []
        purchase_history[user_id].append(f"–ö—É–ø–ª–µ–Ω —Ñ—Ä—É–∫—Ç {fruit_name} –∑–∞ {fruit['price']} –†—É–±–ª–µ–π.")

        save_data()  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        print(f"–ü–æ–∫—É–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {purchase_history}")  # –û—Ç–ª–∞–¥–∫–∞

        # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await context.bot.send_message(ADMIN_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} —Å–æ–≤–µ—Ä—à–∏–ª –ø–æ–∫—É–ø–∫—É: {fruit_name} –∑–∞ {fruit['price']} –†—É–±–ª–µ–π.")
        
        await query.edit_message_text(f"–í—ã –∫—É–ø–∏–ª–∏ —Ñ—Ä—É–∫—Ç {fruit_name}, —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Ç—Å—è.")
    else:
        await query.edit_message_text(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ñ—Ä—É–∫—Ç–∞ {fruit_name}. –ë–∞–ª–∞–Ω—Å: {balance} –†—É–±–ª–µ–π.")


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
async def send_message(update: Update, context: CallbackContext) -> None:
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return

    args = context.args
    if len(args) < 2:
        await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /m @username <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return

    username = args[0].replace('@', '')
    message = " ".join(args[1:])

    try:
        user = await context.bot.get_chat(username)
        await user.send_message(message)
        await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")


# –§—É–Ω–∫—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫
async def history(update: Update, context: CallbackContext) -> None:
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫.")
        return

    if len(context.args) < 1:
        return await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username).")
    
    username = context.args[0].replace('@', '')

    try:
        user = await context.bot.get_chat(username)
        user_id = user.id
        purchases = purchase_history.get(user_id, [])

        if not purchases:
            return await update.message.reply_text(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫
        history_text = "\n".join(purchases)
        await update.message.reply_text(f"–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}:\n{history_text}")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token("7773121702:AAFNl4wnM1JEPGg7XkviYCjgoHOBDJWyAdo").build()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("balance", balance))
    application.add_handler(CommandHandler("shop", fruits_list))

    # –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    application.add_handler(CommandHandler("add_balance", add_balance))
    application.add_handler(CommandHandler("active", active))
    application.add_handler(CommandHandler("unactive", unactive))
    application.add_handler(CommandHandler("history", history))
    application.add_handler(CommandHandler("m", send_message))
    application.add_handler(CommandHandler("mID", get_user_id))


    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(fruit_button, pattern="^fruit_"))
    application.add_handler(CallbackQueryHandler(fruits_list, pattern="^fruit_list$"))
    application.add_handler(CallbackQueryHandler(confirm_payment, pattern="^pay_"))

    application.run_polling()


if __name__ == "__main__":
    main()
